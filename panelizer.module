<?php
/**
 * @file
 * Hook implementations for the Panelizer module.
 */

use \Drupal\Core\Entity\RevisionableInterface;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;

/**
 * Implements hook_theme().
 */
function panelizer_theme() {
  return [
    'panelizer_view_mode' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function panelizer_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\panelizer\Plugin\PanelizerEntityManager $panelizer_manager */
  $panelizer_manager = \Drupal::service('plugin.manager.panelizer_entity');

  // Replace the entity view builder on any entity where we have a Panelizer
  // entity plugin and the entity itself has a view builder.
  foreach ($panelizer_manager->getDefinitions() as $entity_type_id => $panelizer_info) {
    if (isset($entity_types[$entity_type_id]) && $entity_types[$entity_type_id]->hasHandlerClass('view_builder')) {
      $entity_types[$entity_type_id]->setHandlerClass('fallback_view_builder', $entity_types[$entity_type_id]->getHandlerClass('view_builder'));
      $entity_types[$entity_type_id]->setHandlerClass('view_builder', '\Drupal\panelizer\PanelizerEntityViewBuilder');
    }
  }
}

/**
 * Implements hook_panels_build_alter().
 */
function panelizer_panels_build_alter(&$build, PanelsDisplayVariant $panels_display) {
  $builder = $panels_display->getBuilder();
  $storage_type = $panels_display->getStorageType();

  // Add our Javascript customizations for the IPE.
  if ($builder->getPluginId() == 'ipe' && in_array($storage_type, ['panelizer_default', 'panelizer_field'])) {
    $build['#attached']['library'][] = 'panelizer/panels_ipe';

    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $panels_display->getContexts()['@panelizer.entity_context:entity']->getContextValue();
    $revision_id = ($entity instanceof RevisionableInterface) ? $entity->getRevisionId() : NULL;

    // @todo: Make sure that saving as custom is allowed!

    // Pass in the correct default and custom storage ids.
    if ($panels_display->getStorageType() == 'panelizer_field') {
      $panelizer_field_storage_id = $panels_display->getStorageId();
      list (,, $view_mode) = explode(':', $panelizer_field_storage_id);
      $panelizer_default_storage_id = implode(':', [$entity->getEntityTypeId(), $entity->bundle(), $view_mode, 'default']);
    }
    else {
      $panelizer_default_storage_id = $panels_display->getStorageId();
      list (,, $view_mode) = explode(':', $panelizer_default_storage_id);
      $panelizer_field_storage_id = implode(':', [$entity->getEntityTypeId(), $entity->id(), $view_mode, $revision_id]);
    }
    $build['#attached']['drupalSettings']['panelizer']['entity'] = [
      'entity_type_id' => $entity->getEntityTypeId(),
      'entity_id' => $entity->id(),
      'view_mode' => $view_mode,
      'revision_id' => $revision_id,
      'panelizer_default_storage_id' => $panelizer_default_storage_id,
      'panelizer_field_storage_id' => $panelizer_field_storage_id,
    ];
  }
}

/**
 * Implements hook_panels_ipe_panels_display_presave().
 */
function panelizer_panels_ipe_panels_display_presave(PanelsDisplayVariant $panels_display, array $layout_model) {
  // See if the user requested changing the storage type.
  $current_storage = $panels_display->getStorageType() == 'panelizer_default' ? 'default' : 'custom';
  $panelizer_save_as = $layout_model['panelizer_save_as'];
  if ($current_storage !== $panelizer_save_as) {
    $panelizer_entity = $layout_model['panelizer_entity'];

    // If we were custom and now we want to save to the default, we need to
    // save specially to the Panelizer field so that we can give it a copy of
    // the default and let it know that it's a default.
    if ($panelizer_save_as = 'panelizer_default') {
      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
      $entity_type_manager = \Drupal::service("entity_type.manager");
      $storage = $entity_type_manager->getStorage($panelizer_entity['entity_type_id']);
      $entity = $storage->load($panelizer_entity['entity_id']);
      if (isset($entity->panelizer)) {
        /** @var \Drupal\panels\PanelsDisplayManagerInterface $panels_display_manager */
        $panels_display_manager = \Drupal::service('panels.display_manager');
        /** @var \Drupal\Core\Field\FieldItemInterface $item */
        foreach ($entity->panelizer as $item) {
          if ($item->get('view_mode') == $panelizer_entity['view_mode']) {
            $item->set('panels_display', $panels_display_manager->exportDisplay($panels_display));
            list (,,, $default_name) = explode(':', $panelizer_entity['default_storage_id']);
            $item->set('default', $default_name);
          }
        }
        $entity->save();
      }
    }

    // Set the new storage information.
    $panels_display->setStorage($panelizer_save_as, $panelizer_entity[$panelizer_save_as . '_storage_id']);
  }

}

/**
 * Implements hook_form_alter().
 */
function panelizer_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = $form_object->getEntity();

  /** @var \Drupal\panelizer\Plugin\PanelizerEntityManager $panelizer_manager */
  $panelizer_manager = \Drupal::service('plugin.manager.panelizer_entity');
  /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
  $panelizer = \Drupal::service('panelizer');

  if ($panelizer_manager->hasDefinition($display->getTargetEntityTypeId())) {
    $settings = $panelizer->getPanelizerSettings($display->getTargetEntityTypeId(), $display->getTargetBundle(), $display->getMode(), $display);

    $form['panelizer'] = [
      '#tree' => TRUE,
    ];
    $form['panelizer']['enable'] = [
      '#type' => 'checkbox',
      '#title' => t('Panelize this view mode'),
      '#default_value' => !empty($settings['enable']),
    ];
    $form['panelizer']['custom'] = [
      '#type' => 'checkbox',
      '#title' => t('Allow custom overrides of each entity'),
      '#default_value' => !empty($settings['custom']),
      '#states' => [
        'visible' => [
          ':input[name="panelizer[enable]"]' => ['checked' => TRUE],
        ]
      ]
    ];

    $form['#attached']['library'][] = 'panelizer/panelizer_default_form';

    $form['actions']['submit']['#submit'][] = 'panelizer_form_entity_view_display_edit_form_submit';
  }
}

/**
 * Form submission callback for entity_view_display_edit_form.
 */
function panelizer_form_entity_view_display_edit_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = $form_object->getEntity();

  $settings = [
    'enable' => $form_state->getValue(['panelizer', 'enable']),
    'custom' => $form_state->getValue(['panelizer', 'custom']),
  ];

  /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
  $panelizer = \Drupal::service('panelizer');
  $panelizer->setPanelizerSettings($display->getTargetEntityTypeId(), $display->getTargetBundle(), $display->getMode(), $settings, $display);
}

/**
 * Prepares variables for Panelizer view mode templates.
 *
 * Default template: panelizer-view-mode.html.twig
 */
function template_preprocess_panelizer_view_mode(&$variables) {
  $element = $variables['element'];

  // Copy values into the variables.
  /** @var \Drupal\panelizer\Plugin\PanelizerEntityInterface $panelizer_plugin */
  $panelizer_plugin = $variables['panelizer_plugin'] = $element['#panelizer_plugin'];
  /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
  $panels_display = $variables['panels_display'] = $element['#panels_display'];
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $variables['entity'] = $element['#entity'];
  $view_mode = $variables['view_mode'] = $element['#view_mode'];
  $variables['content'] = $element['content'];
  $variables['title'] = isset($element['#title']) ? $element['#title'] : '';

  // Setup the defaults.
  $variables['title_element'] = 'h2';
  $variables['entity_url'] = $entity->toUrl('canonical', [
    'language' => $entity->language(),
  ]);

  // Allow the Panelizer entity plugin to do additional preprocessing.
  $panelizer_plugin->preprocessViewMode($variables, $entity, $panels_display, $view_mode);
}

